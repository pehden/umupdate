#!/bin/bash
echo "Welcome " $USER "@" $HOSTNAME
sudo apt install inxi speedtest-cli neofetch curl
sudo apt update && sudo apt upgrade -y && sudo apt autoremove
echo "Flushing Logs"
# output current pihole db size
sudo du -h /etc/pihole/pihole-FTL.db -h
# flush pihole logs
pihole flush

# Path to the stamp file
stamp_file=".stamp"

# Get the current timestamp
current_timestamp=$(date +%s)

# Get the timestamp of three days ago
three_days_ago=$(date -d '3 days ago' +%s)

# Check if the stamp file exists
if [[ -f "$stamp_file" ]]; then
  # Read the contents of the stamp file
  stamp_contents=$(cat "$stamp_file")

  # Check if the stamp contents are older than three days
  if [[ $stamp_contents -lt $three_days_ago ]]; then
    echo "The stamp file contents are older than three days. [ $stamp_contents ]"

    # Perform the desired operations here
    # Stop pihole FTL service
    sudo systemctl stop pihole-FTL
    # Delete the FTL database file
    sudo rm /etc/pihole/pihole-FTL.db
    # Start pihole FTL service
    sudo systemctl start pihole-FTL

    # Update the stamp file with the current timestamp
    echo $current_timestamp > "$stamp_file"

  else
    echo "The stamp file contents are not older than three days. [ $stamp_contents ]"
    sleep 3
  fi
else
  echo "The stamp file does not exist."

  # Create the stamp file with the current timestamp
  echo $current_timestamp > "$stamp_file"
fi

# Output reduced pihole db size
  sudo du -h /etc/pihole/pihole-FTL.db -h

pihole arpflush
pihole restartdns
pihole -g
pihole restartdns
pihole -up
  uptime; sleep 3; echo "Resuming!" 
speedtest --secure

inxi

echo who -a && last -n 6
sleep 3
# Get the installed kernel version
installed_kernel=$(uname -r)

# URL to the Raspberry Pi kernel repository
url="https://api.github.com/repos/raspberrypi/linux"

# Get the repository information
repo_info=$(curl -s "$url")

# Extract the default branch
default_branch=$(echo "$repo_info" | grep -m 1 '"default_branch":' | cut -d'"' -f4)
# Extract the version number from the default branch
latest_kernel=$(echo "$default_branch" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | cut -d'.' -f1)
echo "latest: $latest_kernel"
echo "default: $default_branch"
sleep 5

# Calculate the timestamp of one week ago
one_week_ago=$(date -d '1 week ago' +%s)

# Get the system uptime in seconds
uptime_timestamp=$(printf "%.0f" $(cut -d' ' -f1 /proc/uptime))

echo "l8r ! " $USER "@" $HOSTNAME

neofetch

# Check if the installed kernel is newer than the latest kernel version and the system uptime is less than one week
if [[ $installed_kernel != $latest_kernel ]] && [[ $uptime_timestamp -lt $one_week_ago ]]; then
  echo "$default_branch"
  echo "$latest_kernel"
  echo "The installed kernel ($installed_kernel) differs from the default branch kernel version ($default_branch)."

  # Prompt for reboot confirmation
  read -p "Do you want to reboot? (y/n): " choice
  if [[ $choice == [Yy] ]]; then
    echo "Rebooting..."
    # Uncomment the following line to perform the reboot
     echo "fin ;p  (rebooting) ;-p";
     sudo reboot
  else
    echo "Reboot cancelled."
  fi
else
  echo "The installed kernel is up to date or the system has been running for longer than one week. No reboot required."
fi
echo "fin ;p  ;-p";

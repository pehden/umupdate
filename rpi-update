echo "Welcome " $USER "@" $HOSTNAME
sudo apt install inxi speedtest-cli 
ping -c 5 1.1.1.1
sudo apt update && sudo apt upgrade; sudo apt autoremove
echo "Flushing Logs"
# output current pihole db size
sudo du -h /etc/pihole/pihole-FTL.db -h
# flush pihole logs
pihole flush

#!/bin/bash

# Path to the stamp file
stamp_file=".stamp"

# Get the timestamp of a week ago
week_ago=$(date -d '1 week ago' +%s)

# Check if the stamp file exists
if [[ -f "$stamp_file" ]]; then
  # Read the contents of the stamp file
  stamp_contents=$(cat "$stamp_file")

  # Check if the stamp contents equal a week ago
  if [[ "$stamp_contents" == "$week_ago" ]]; then
    echo "The stamp file contents are equal to a week ago"
    # Perform the cleanup operations here
    # Stop pihole FTL service
    sudo systemctl stop pihole-FTL
    # Delete the FTL database file
    sudo rm /etc/pihole/pihole-FTL.db
    # Start pihole FTL service
    sudo systemctl start pihole-FTL
    # Output reduced pihole db size
    sudo du -h /etc/pihole/pihole-FTL.db -h
  else
    echo "The stamp file contents do not match a week ago"
  fi
else
  echo "The stamp file does not exist"
   echo $(date +%s) > "$stamp_file"
fi
pihole arpflush
pihole restartdns
pihole -g
pihole restartdns
pihole -up
speedtest --secure
inxi
echo who -a && last -n 6
echo "fin ;p  (rebooting) maybe ;-p";


# Get the running kernel version
running_kernel=$(uname -r)

# Get the installed kernel version
installed_kernel=$(ls /boot/vmlinuz-* | awk -F'-' '{print $2}')

# Get the uptime of the system
uptime=$(uptime -s)

# Get the current timestamp
current_timestamp=$(date +%s)

# Get the timestamp of one month ago
one_month_ago=$(date -d '1 month ago' +%s)

# Convert uptime to timestamp
uptime_timestamp=$(date -d "$uptime" +%s)

# Check if the system has been running for longer than one month
if [[ $uptime_timestamp -lt $one_month_ago ]]; then
  echo "The system has been running for longer than one month."
  if [[ $running_kernel != $installed_kernel ]]; then
    read -p "The running kernel ($running_kernel) differs from the installed kernel ($installed_kernel). Do you want to reboot? (y/n): " choice
    if [[ $choice == [Yy] ]]; then
      echo "Rebooting..."
      # Uncomment the following line to perform the reboot
      # sudo reboot
    else
      echo "Reboot cancelled."
    fi
  else
    echo "The running kernel matches the installed kernel. No reboot required."
  fi
else
  echo "The system has not been running for longer than one month. No reboot required."
fi



#!/bin/bash
echo "Welcome " $USER "@" $HOSTNAME
sudo apt install inxi speedtest-cli neofetch
sudo apt update && sudo apt upgrade -y --noconfirm && sudo apt autoremove
echo "Flushing Logs"
# output current pihole db size
sudo du -h /etc/pihole/pihole-FTL.db -h
# flush pihole logs
pihole flush

# Path to the stamp file
stamp_file=".stamp"

# Get the timestamp of a week ago
week_ago=$(date -d '1 week ago' +%s)

# Check if the stamp file exists
if [[ -f "$stamp_file" ]]; then
  # Read the contents of the stamp file
  stamp_contents=$(cat "$stamp_file")

  # Check if the stamp contents equal a week ago
  if [[ "$stamp_contents" == "$week_ago" ]]; then
    echo "<./>The stamp file contents are equal to a week ago"
    # Perform the cleanup operations here
    # Stop pihole FTL service
    sudo systemctl stop pihole-FTL
    # Delete the FTL database file
    sudo rm /etc/pihole/pihole-FTL.db
    # Start pihole FTL service
    sudo systemctl start pihole-FTL
    # Output reduced pihole db size
    sudo du -h /etc/pihole/pihole-FTL.db -h
  else
    echo "<!> The stamp file contents do not match a week ago"
  fi
else
  echo "The stamp file does not exist"
   echo $(date +%s) > "$stamp_file"
fi
pihole arpflush
pihole restartdns
pihole -g
pihole restartdns
pihole -up
#speedtest --secure
inxi
echo who -a && last -n 6
echo "fin ;p  (rebooting) maybe ;-p";

# Get the installed kernel version
installed_kernel=$(uname -r)

# URL to the Raspberry Pi kernel repository releases
url="https://api.github.com/repos/raspberrypi/linux/releases"

# Get the latest release information
latest_release=$(curl -s "$url" | grep -m 1 '"tag_name":' | cut -d'"' -f4)

# Extract the kernel version from the release tag
latest_kernel=$(echo "$latest_release" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
echo $latest_kernel
echo $latest_release
# Calculate the timestamp of one week ago
one_week_ago=$(date -d '1 week ago' +%s)

# Get the system uptime in seconds
uptime_timestamp=$(printf "%.0f" $(cut -d' ' -f1 /proc/uptime))
echo "Bye ! " $USER "@" $HOSTNAME
neofetch

# Check if the installed kernel is newer than the latest kernel version and the system uptime is less than one week
if [[ $installed_kernel != $latest_kernel ]] && [[ $uptime_timestamp -lt $one_week_ago ]]; then
  echo "The installed kernel ($installed_kernel) differs from the latest kernel version ($latest_kernel)."

  # Prompt for reboot confirmation
  read -p "Do you want to reboot? (y/n): " choice
  if [[ $choice == [Yy] ]]; then
    echo "Rebooting..."
    # Uncomment the following line to perform the reboot
     sudo reboot
  else
    echo "Reboot cancelled."
  fi
else
  echo "The installed kernel is up to date or the system has been running for longer than one week. No reboot required."
fi

#!/bin/bash
echo "Welcome " $USER "@" $HOSTNAME
sudo apt install inxi speedtest-cli neofetch curl
sudo apt update && sudo apt upgrade -y && sudo apt autoremove
# Get the uptime of the system
uptime=$(uptime -s)

# Get the current timestamp
current_timestamp=$(date +%s)

# Convert uptime to timestamp
uptime_timestamp=$(date -d "$uptime" +%s)

# Calculate the time difference in seconds
time_difference=$((current_timestamp - uptime_timestamp))

# Convert time difference to days, hours, and minutes
days=$((time_difference / 86400))
hours=$(( (time_difference % 86400) / 3600 ))
minutes=$(( (time_difference % 3600) / 60 ))

# Check if the system has been running for longer than three days
if [[ $time_difference -ge $((3 * 24 * 3600)) ]]; then
 echo "The system has been running for longer than three days."
 echo "Flushing Logs"
 # output current pihole db size
 sudo du -h /etc/pihole/pihole-FTL.db -h
 # flush pihole logs
 pihole flush
 # Output pihole db size
 sudo du -h /etc/pihole/pihole-FTL.db -h
 # Stop pihole FTL service
 sudo systemctl stop pihole-FTL
 # Delete the FTL database file
 sudo rm /etc/pihole/pihole-FTL.db
 # Start pihole FTL service
 sudo systemctl start pihole-FTL
 # Output reduced pihole db size
 sudo du -h /etc/pihole/pihole-FTL.db -h

else
  echo "The system has not been running for longer than three days. No pihole log operations required."
  echo "System uptime: $days days, $hours hours, $minutes minutes"
fi


pihole arpflush
pihole restartdns
pihole -g
pihole restartdns
pihole -up
echo $USER "@" $HOSTNAME
  uptime; sleep 3; echo "Resuming!" 
speedtest --secure

inxi

echo who -a && last -n 6
sleep 3
# Get the installed kernel version
installed_kernel=$(uname -r)

# URL to the Raspberry Pi kernel repository
url="https://api.github.com/repos/raspberrypi/linux"

# Get the repository information
repo_info=$(curl -s "$url")

# Extract the default branch
default_branch=$(echo "$repo_info" | grep -m 1 '"default_branch":' | cut -d'"' -f4)
# Extract the version number from the default branch
latest_kernel=$(echo "$default_branch" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | cut -d'.' -f1)
echo "latest: $latest_kernel"
echo "default: $default_branch"
sleep 5

# Get the system uptime in seconds
uptime_timestamp=$(printf "%.0f" $(cut -d' ' -f1 /proc/uptime))

echo "l8r ! " $USER "@" $HOSTNAME
neofetch
echo $USER "@" $HOSTNAME
# Get the uptime of the system
uptime=$(uptime -s)

# Get the current timestamp
current_timestamp=$(date +%s)

# Convert uptime to timestamp
uptime_timestamp=$(date -d "$uptime" +%s)

# Calculate the time difference in seconds
time_difference=$((current_timestamp - uptime_timestamp))

# Convert time difference to days, hours, and minutes
days=$((time_difference / 86400))
hours=$(( (time_difference % 86400) / 3600 ))
minutes=$(( (time_difference % 3600) / 60 ))

# Check if the system has been running for longer than three days
if [[ $time_difference -ge $((3 * 24 * 3600)) ]]; then
  echo "The system has been running for longer than three days."
  if [[ $running_kernel != $installed_kernel ]]; then
    read -p "The running kernel ($running_kernel) differs from the installed kernel ($installed_kernel). Do you want to reboot? (Y/n): " choice
    if [[ $choice != [Nn] ]]; then
      echo "Rebooting..."
      echo $USER "@" $HOSTNAME
      # Uncomment the following line to perform the reboot
       sudo reboot
    else
      echo "Reboot cancelled."
    fi
  else
    echo "The running kernel ($running_kernel) matches the installed kernel ($installed_kernel). No reboot required."
  fi
else
  echo "The system has not been running for longer than three days. No reboot required."
  echo "System uptime: $days days, $hours hours, $minutes minutes"

# Default to "no" if running for less than three days
  read -p "Do you want to reboot? (y/N): " choice
  if [[ $choice == [Yy] ]]; then
    echo "Rebooting..."
    echo $USER "@" $HOSTNAME
    # Uncomment the following line to perform the reboot
     sudo reboot
  else
    echo "Reboot cancelled."
  fi
fi
echo $USER "@" $HOSTNAME
echo "fin ;p  ;-p";

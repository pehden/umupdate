#!/bin/bash
## To use this in cli use
# bash <(curl -s https://raw.githubusercontent.com/tek-aevl/umupdate/main/debupdate)


# Get the IP address of the host
HOST_IP=$(hostname -I | awk '{print $1}')

# Display a welcome message
echo "Welcome $USER@$HOSTNAME ($HOST_IP)"
sleep 2

# Display system information
echo ":~${HOST_IP} uname -a"
uname -a
sleep 3

# Display login history
echo ":~${HOST_IP} last -10"
last -10
sleep 3

# Display information about users currently logged in
echo ":~${HOST_IP} who -a"
who -a
sleep 3
echo " Updating $USER@$HOSTNAME ($HOST_IP) "
# Upgrade and Update the system
sudo apt update
sudo apt upgrade -y
sudo apt autoremove

# Check if curl command is installed
if ! command -v curl &> /dev/null; then
  # curl command is not found, install it
  echo "Installing curl..."
  if command -v apt &> /dev/null; then
    sudo apt update
    sudo apt install -y curl
  elif command -v pacman &> /dev/null; then
    sudo pacman -Sy curl
  else
    echo "Unable to install curl. Please install it manually."
    exit 1
  fi
fi


# Check if inxi command is installed
if ! command -v inxi &> /dev/null; then
  # inxi command is not found, install it
  echo "Installing inxi..."
  if command -v apt &> /dev/null; then
    sudo apt update
    sudo apt install -y inxi
  elif command -v pacman &> /dev/null; then
    sudo pacman -Sy inxi
  else
    echo "Unable to install inxi. Please install it manually."
    exit 1
  fi
fi

# Check if inxi command is installed
if ! command -v neofetch &> /dev/null; then
  # inxi command is not found, install it
  echo "Installing neofetch..."
  if command -v apt &> /dev/null; then
    sudo apt update
    sudo apt install -y neofetch
  elif command -v pacman &> /dev/null; then
    sudo pacman -Sy neofetch
  else
    echo "Unable to install inxi. Please install it manually."
    exit 1
  fi
fi


echo " $USER@$HOSTNAME ($HOST_IP)"
# Get the uptime of the system
uptime=$(uptime -s)
echo " $USER@$HOSTNAME ($HOST_IP)"
# Get the current timestamp
current_timestamp=$(date +%s)
echo " $USER@$HOSTNAME ($HOST_IP)"
# Get the timestamp of three days ago
three_days_ago=$(date -d '3 days ago' +%s)

# Convert uptime to timestamp
uptime_timestamp=$(date -d "$uptime" +%s)

# Calculate the time difference in seconds
time_difference=$((current_timestamp - uptime_timestamp))

# Convert time difference to days, hours, and minutes
days=$((time_difference / 86400))
hours=$(( (time_difference % 86400) / 3600 ))
minutes=$(( (time_difference % 3600) / 60 ))

# Get the running kernel version
running_version=$(uname -r)

# Extract major version using regular expression
if [[ $running_version =~ ^([0-9]+\.[0-9]+\.[0-9]+).* ]]; then
  running_version="${BASH_REMATCH[1]}"
else
  echo "Invalid version format"
  exit 1
fi
echo "Major version: $running_version"
running_kernel=$(running_version)

# Get the installed kernel version
#installed_kernel=$(rpm -q kernel --last | awk 'NR==1{print $1}')
#installed_kernel=$(ls /boot/vmlinuz-* | awk -F'-' '{print $2}')
#installed_kernel=$(dpkg -l | grep linux- | awk '{print $2}' | awk -F'-' '{print $4}')
installed_kernel=$(dpkg --list | grep "linux-image" | awk '{print $3}' | awk -F'-' '{print $1}' | sort -V | tail -n1)

# Input version string
iversion=$(installed_kernel)

# Extract major version using regular expression
if [[ $iversion =~ ^([0-9]+\.[0-9]+\.[0-9]+).* ]]; then
  iversion="${BASH_REMATCH[1]}"
else
  echo "Invalid version format"
  exit 1
fi
echo "Major version: $iversion"
installed_kernel=$(iversion)

if [[ $running_kernel != $installed_kernel ]]; then
  echo "pick $USER@$HOSTNAME ($HOST_IP)" &&  uname -a
  read -p "The running kernel ($running_kernel) differs from the installed kernel ($installed_kernel). Do you want to reboot? (y/N): " choice
  if [[ $choice == [Yy] ]]; then
    echo "Rebooting..."
       echo "L8r $USER@$HOSTNAME ($HOST_IP)"
    # Uncomment the following line to perform the reboot
    sleep 3 && sudo reboot
  else
    echo "Reboot cancelled."  &&   sleep 3 
    echo " $USER@$HOSTNAME ($HOST_IP)"
  fi
else
  uname -a && echo "The running kernel ($running_kernel) matches the installed kernel ($installed_kernel). No reboot required."
  uptime_seconds=$(cat /proc/uptime | cut -d ' ' -f 1)
  if [[ $uptime_seconds -ge $((3 * 24 * 3600)) ]]; then
    echo "The system has been running for longer than three days."
    days=$((uptime_seconds / 86400))
    hours=$((uptime_seconds % 86400 / 3600))
    minutes=$((uptime_seconds % 3600 / 60))
    echo "Time difference: $days days, $hours hours, $minutes minutes"
    read -p "Do you want to reboot? (Y/n): " choice
    if [[ $choice == [Yy] ]]; then
      echo "Rebooting... $USER@$HOSTNAME ($HOST_IP)"
      # Uncomment the following line to perform the reboot
          sleep 2 && sudo reboot
    else
      echo "Reboot cancelled. $USER@$HOSTNAME ($HOST_IP)" && sleep 4
    fi
  else
    echo "So good news! $USER@$HOSTNAME ($HOST_IP)"
    echo "The system has not been running for longer than three days. No reboot required."
    days=$((uptime_seconds / 86400))
    hours=$((uptime_seconds % 86400 / 3600))
    minutes=$((uptime_seconds % 3600 / 60))
    echo "Time difference: $days days, $hours hours, $minutes minutes"
echo "uptime $USER@$HOSTNAME ($HOST_IP)"
uptime && sleep 3
    # Default to "no" if running for less than three days
    read -p "Do you want to reboot? (y/N): " choice
    if [[ $choice == [Yy] ]]; then
      echo "Rebooting... $USER@$HOSTNAME ($HOST_IP)"
      # Uncomment the following line to perform the reboot
          sleep 2 && sudo reboot
    else
      echo "Reboot cancelled."  &&  sleep 4 
    fi
  fi
fi
    sleep 2 &&     sleep 2 
echo "inxi $USER@$HOSTNAME ($HOST_IP)"
inxi
neofetch
echo "byah $USER@$HOSTNAME $HOST_IP "
 sleep 2 &&     sleep 2
